#include<stdio.h>
 
struct process
{
      char process_name;
      int arrival_time, burst_time, ct, waiting_time, turnaround_time, priority;
      int status;
}process_queue[10],q[50];

 
void Arrival_Time_Sorting()
{
      struct process temp;
      int i, j;
      for(i = 0; i < n - 1; i++)
      {
            for(j = i + 1; j < n; j++)
            {
                  if(process_queue[i].arrival_time > process_queue[j].arrival_time)
                  {
                        temp = process_queue[i];
                        process_queue[i] = process_queue[j];
                        process_queue[j] = temp;
                  }
            }
      }
}


int main()
{
      int i, time = 0, bt = 0, largest;
      char c;
      float wait_time = 0, tat = 0, average_wt, average_tat;
      printf("\nEnter Total Number of Processes:\t");
      scanf("%d", &n);
      for(i = 0, c = 'A'; i < n; i++, c++)
      {
            pq[i].process_name = c;
            printf("\nEnter Details For Process[%C]:\n", pq[i].process_name);
            printf("Enter Arrival Time:\t");
            scanf("%d", &pq[i].at );
            printf("Enter Burst Time:\t");
            scanf("%d", &pq[i].bt);
            pq[i].priority = 0;
            bt = bt + pq[i].bt;
      }
      at_Sorting();
     pq[9].priority = -9999;
      printf("\nProcess Name\tArrival Time\tBurst Time\tPriority\tWaiting Time");
      for(time = pq[0].at; time < bt;)
      {
            largest = 9;
            if(time==0){
			for(i = 0; i < n; i++)
            {
                  if(pq[i].at <= time && pq[i].bt != 0 && pq[i].priority > pq[largest].priority)
                  {
                        largest = i;
                  }
            }}
            else{
			for(i = 0; i < count; i++)
            {
                  if(q[i].priority > pq[largest].priority && q[i].bt!=0 && pq[i].bt!=0)
                  {
                        largest = i;
                  }
            }}
            if(pq[largest].wt==0)
			{pq[largest].wt = time - pq[largest].at;}
			else
			{pq[largest].wt = time - pq[largest].wt;}
		    time = time + 1;
            pq[largest].ct = time;
            //pq[largest].tat = pq[largest].ct - pq[largest].at;
            pq[largest].priority = 1;
            pq[largest].bt-=1;
            wait_time = wait_time + pq[largest].wt;
            tat = tat + pq[largest].tat;
            count++;
            for(i = largest+1; i < n; i++)
            {
                  if(pq[i].at <= time)
                  {
                        q[count-1]=pq[i];
                  }
            }
            if(pq[largest].bt!=0)
			{
			q[count]=pq[largest];
			}
			pchange();

